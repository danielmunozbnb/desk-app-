{
  "id": "bookDesk",
  "include": [
        "states.script",
        "wql.script"
  ],
  "endPoints": [
    {
      "baseUrlType": "WORKDAY-WQL",
      "name": "allLocations",
      "authType": "sso",
      "url": "data?query=SELECT%20locationName%2C%20workdayID%20FROM%20locations%20(locationUsagesForLocation%20%3D%20(46db411c4a5245fbb39834d8b2cba049))"
    },
    {
      "name": "areas",
      "baseUrlType": "app",
      "url": "/areas",
      "authType": "sso"
    },
    {
      "name": "desksByAreaID",
      "baseUrlType": "WORKDAY-WQL-QUERY",
      "url": "<% wql.getDesksByAreaID(areaID) %>",
      "authType": "sso",
      "deferred": true
    },
    {
      "name": "getLocations",
      "baseUrlType": "WORKDAY-WQL-QUERY",
      "url": "<% wql.getLocations() %>",
      "authType": "sso",
      "deferred": true
    },
    {
      "name": "getLocation",
      "baseUrlType": "WORKDAY-WQL-QUERY",
      "url": "<% wql.getLocation(areaID) %>",
      "authType": "sso",
      "deferred": true
    },
    {
      "name": "getAreasByLocation",
      "baseUrlType": "WORKDAY-WQL-QUERY",
      "url": "<% wql.getAreasByLocation(location) %>",
      "authType": "sso",
      "deferred": true
    },
    {
      "name": "bookingEventStatus",
      "baseUrlType": "WORKDAY-WQL-QUERY",
      "url": "<% wql.getBookingEventStatus(id) %>",
      "authType": "sso",
      "deferred": true
    },
    {
      "name": "desk",
      "baseUrlType": "app",
      "url": "/desks",
      "authType": "sso"
    },
    {
      "name": "reservations",
      "baseUrlType": "app",
      "url": "/bookings",
      "authType": "sso"
    },
    {
      "baseUrlType": "COMMON",
      "name": "currLoginUser",
      "authType": "sso",
      "url": "/workers/me"
    }
  ],
  "outboundData": {
    "outboundEndPoints": [
      {
        "name": "bookingPost",
        "baseUrlType": "app",
        "httpMethod": "POST",
        "url": "bookings",
        "authType": "sso",
        "values": [
          {
            "outboundPath": "state",
            "value": "<% states.requested %>"
          },
          {
            "outboundPath": "worker.id",
            "value": "<% currLoginUser.id %>"
          },
          {
            "outboundPath": "date",
            "value": "<% flowVariables.selectedDate %>"
          }
        ]
      },
      {
        "name": "notificationEvent",
        "baseUrlType": "app",
        "url": "reservationNotificationEvents",
        "httpMethod": "POST",
        "authType": "sso",
        "onSend": "<%  self.data; %>",
        "values": [
          {
            "outboundPath": "businessProcessTarget.id",
            "value": "<% bookingPost.id %>"
          }
        ]
      }
    ]
  },
  "script": "<%
             var fillAreas = function(location) {
                 if (empty location) {
                     return [];
                 }

                 var areas = getAreasByLocation.invoke({'location': location}).data;
                 console.debug(areas);
                 var validAreas = [];
                 for (var area : areas) {
                 validAreas.add({'id': area.Area.id, 'name': area.name});
                 }
                 console.debug(validAreas);
                 return validAreas;


             };

             var fillDesks = function(areaID) {
                 if (empty areaID) {

                     return [];
                 }

                 var reservations = reservations.data;
                 var desks = desksByAreaID.invoke({'areaID': areaID}).data;
                 if (empty reservations) {
                     return desks.map(desk => {{'id': desk.Desk.id, 'descriptor': desk.Desk.descriptor, 'deskName': desk.deskName}});
                 } else {
                     // For each desk, we check whether it's already reserved or requested by a worker for that specific date.
                     // We check that by iterating through all bookings. Only when no booking contains the desk, the desk is available.
                     var validDesks = [];
                         var skipDesk = false;
                         for (var desk : desks) {
                             for (var booking : reservations) {
                                 if (desk.Desk.id == booking.desk.id && booking.date == flowVariables.selectedDate
                                     && states.isRequestedOrReserved(bookingEventStatus, booking.id, booking.state)) {
                                     skipDesk = true;
                                         break;
                                 }
                             }
                                 if (skipDesk) {
                                     skipDesk = false;
                                 } else {
                                     validDesks.add({'id': desk.Desk.id, 'descriptor': desk.Desk.descriptor, 'deskName': desk.deskName});
                                 }
                         }
                         return validDesks;
                 }
             };
             %>",
  "presentation": {
    "headerSize": "VPS_DEFAULT",
    "pageType": "edit",
    "body": {
      "type": "section",
      "horizontal": false,
      "children": [
        {
          "type": "instanceList",
          "id": "locationIList",
          "label": "Location",
          "displayKey": "locationName",
          "idKey":"workdayID",
          "values": "<% allLocations.data %>",
          "onChange": "<%
                       console.debug(locationIList.value[0]);
                       var areas = fillAreas(locationIList.value[0]);
                       areasIList.setValues(areas);
                       areasIList.visible = true;
                       if (empty areas) {
                           areasIList.setError('There are no areas available');
                       }
                       areasIList.setValue([]);

                       %>"

        },
        {
          "type": "instanceList",
          "id": "areasIList",
          "label": "Areas",
          "displayKey": "name",
          "visible": true,
          "required": true,
          "values": "<% [] %>",
          "onChange": "<%
                       desksAvailableIList.clearError();
                       if (!empty areasIList.value) {
                           var desks = fillDesks(areasIList.value[0]);
                               desksAvailableIList.setValues(desks);
                               desksAvailableIList.visible = true;
                               if (empty desks) {
                                   desksAvailableIList.setError('There are no desks available');
                               }
                       } else {
                           desksAvailableIList.visible = false;
                       }
                       desksAvailableIList.setValue([]);
                       %>"
        },
        {
          "type": "instanceList",
          "id": "desksAvailableIList",
          "label": "Desks available",
          "displayKey": "deskName",
          "values": "<% [] %>",
          "valueOutBinding": "bookingPost.desk.id",
          "visible": true,
          "required": true
        }
      ]
    }
  }
}