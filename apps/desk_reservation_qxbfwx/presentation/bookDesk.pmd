{
  "id": "bookDesk",
  "include": [
        "states.script",
        "wql.script"
  ],
  "endPoints": [
    {
      "name": "allLocationsEP",
      "baseUrlType": "WORKDAY-WQL",
      "authType": "sso",
      "url": "<% wql.allLocations() %>"
    },
    {
      "name": "desksByAreaIDEP",
      "baseUrlType": "WORKDAY-WQL",
      "url": "<% wql.desksByAreaID(areaID) %>",
      "authType": "sso",
      "deferred": true
    },
    {
      "name": "areasByLocationEP",
      "baseUrlType": "WORKDAY-WQL",
      "url": "<% wql.areasByLocation(location) %>",
      "authType": "sso",
      "deferred": true
    },
    {
      "name": "bookingEventStatusEP",
      "baseUrlType": "WORKDAY-WQL",
      "url": "<% wql.bookingEventStatus(id) %>",
      "authType": "sso",
      "deferred": true
    },
    {
      "name": "reservationsEP",
      "baseUrlType": "app",
      "url": "/bookings",
      "authType": "sso"
    },
    {
      "name": "currLoginUserEP",
      "baseUrlType": "COMMON",
      "authType": "sso",
      "url": "/workers/me"
    }
  ],
  "outboundData": {
    "outboundEndPoints": [
      {
        "name": "bookingPost",
        "baseUrlType": "app",
        "httpMethod": "POST",
        "url": "bookings",
        "authType": "sso",
        "values": [
          {
            "outboundPath": "state",
            "value": "<% states.requested %>"
          },
          {
            "outboundPath": "worker.id",
            "value": "<% currLoginUserEP.id %>"
          },
          {
            "outboundPath": "date",
            "value": "<% flowVariables.selectedDate %>"
          }
        ]
      },
      {
        "name": "notificationEvent",
        "baseUrlType": "app",
        "url": "reservationNotificationEvents",
        "httpMethod": "POST",
        "authType": "sso",
        "onSend": "<%  self.data %>",
        "values": [
          {
            "outboundPath": "businessProcessTarget.id",
            "value": "<% bookingPost.id %>"
          }
        ]
      }
    ]
  },
  "script": "<%
             var fillAreas = function(selectedLocations) {
                 if (empty selectedLocations)
                     return [];

                 var areas = areasByLocationEP.invoke({'location': selectedLocations[0].id}).data;
                 console.debug('areas EP ', areasByLocationEP.invoke({'location': selectedLocations[0].id}));
                 return areas.map(area => {{'id': area.Area.id, 'name': area.name}});
             };


             var fillDesks = function(areaID) {
                 if (empty areaID)
                     return [];

                 var reservations = reservationsEP.data;
                 var desks = desksByAreaIDEP.invoke({'areaID': areaID}).data;
                 if (empty reservations) {
                     return desks.map(desk => {{'id': desk.Desk.id, 'descriptor': desk.Desk.descriptor, 'deskName': desk.deskName}});
                 } else {
                     // For each desk, we check whether it's already reserved or requested by a worker for that specific date.
                     // We check that by iterating through all bookings. Only when no booking contains the desk, the desk is available.
                     var validDesks = [];
                     var skipDesk = false;
                     for (var desk : desks) {
                         if (!desk.disabled) {
                             for (var booking : reservations) {
                                 if (desk.Desk.id == booking.desk.id && booking.date == flowVariables.selectedDate
                                     && states.isRequestedOrReserved(bookingEventStatusEP, booking.id, booking.state)) {
                                     skipDesk = true;
                                     break;
                                 }
                             }
                         } else {
                             skipDesk = true;
                             break;
                         }

                         if (skipDesk) {
                             skipDesk = false;
                         } else {
                             validDesks.add({'id': desk.Desk.id, 'descriptor': desk.Desk.descriptor, 'deskName': desk.deskName});
                         }
                     }
                     return validDesks;
                 }
             };
             %>",
  "presentation": {
    "headerSize": "VPS_DEFAULT",
    "pageType": "edit",
    "title": {
      "type": "title",
      "label": "<% presentationLabels.bookDesk %>"
    },
    "body": {
      "type": "section",
      "horizontal": false,
      "children": [
        {
          "type": "instanceList",
          "id": "locationIList",
          "label": "<% presentationLabels.location %>",
          "displayKey": "locationName",
          "idKey": "workdayID",
          "values": "<% allLocationsEP.data %>",
          "onChange": "<%
                       console.debug(locationIList.value[0]);
                       var areas = fillAreas(locationIList.getSelectedEntries());
                       areasIList.setValues(areas);
                       areasIList.visible = true;
                       if (empty areas) {
                           areasIList.setError(presentationLabels.noAreasAvailable);
                       } else
                           areasIList.clearError();

                       areasIList.setValue([]);
                       %>"
        },
        {
          "type": "instanceList",
          "id": "areasIList",
          "label": "<% presentationLabels.areas %>",
          "displayKey": "name",
          "visible": true,
          "required": true,
          "values": "<% [] %>",
          "onChange": "<%
                       desksAvailableIList.clearError();
                       if (!empty areasIList.value) {
                           var desks = fillDesks(areasIList.value[0]);
                               desksAvailableIList.setValues(desks);
                               desksAvailableIList.visible = true;
                               if (empty desks) {
                                   desksAvailableIList.setError(presentationLabels.noDesksAvailable);
                               }
                       } else {
                           desksAvailableIList.visible = false;
                       }
                       desksAvailableIList.setValue([]);
                       %>"
        },
        {
          "type": "instanceList",
          "id": "desksAvailableIList",
          "label": "<% presentationLabels.availableDesks %>",
          "displayKey": "deskName",
          "values": "<% [] %>",
          "valueOutBinding": "bookingPost.desk.id",
          "visible": true,
          "required": true
        }
      ]
    }
  }
}